<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.info.back.dao.IBackUserDao">
    <resultMap id="BaseResultMap" type="BackUser">
        <id column="id" property="id"/>
        <result column="user_account" property="userAccount"/>
        <result column="user_password" property="userPassword"/>
        <result column="user_name" property="userName"/>
        <result column="user_sex" property="userSex"/>
        <result column="user_address" property="userAddress"/>
        <result column="user_telephone" property="userTelephone"/>
        <result column="user_mobile" property="userMobile"/>
        <result column="user_email" property="userEmail"/>
        <result column="user_qq" property="userQq"/>
        <result column="create_date" property="createDate"/>
        <result column="update_date" property="updateDate"/>
        <result column="add_ip" property="addIp"/>
        <result column="remark" property="remark"/>
        <result column="status" property="status"/>
        <result column="distribution_rate" property="distributionRate"/>
        <result column="order_limit_mor" property="orderLimitMor"/>
        <result column="order_limit_nig" property="orderLimitNig"/>
        <result column="order_limit_flag" property="orderLimitFlag"/>

    </resultMap>
    <select id="selectBackUserByIds" resultMap="BaseResultMap" parameterType="String">
        select id,user_name,order_limit_mor,order_limit_nig,order_limit_flag from back_user where status =1 and id in
        <foreach collection="ids" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <select id="selectBackUserNameByIds" resultType="String" parameterType="String">
        select user_name from back_user where status =1 and id in
        <foreach collection="ids" item="item" open="(" separator="," close=")">
          #{item}
        </foreach>
    </select>
    <insert id="insertLog" parameterType="BackLog">
		insert into back_log (user_id,log_type,user_log) values (#{userId},#{logType},#{userLog})
	</insert>
    <sql id="findAllSql">
        from back_user
        where 1=1
        <if test="status == null or status == ''">
            and status=1
        </if>
        <if test="id != null and id !=''">
            and id = #{id}
        </if>
        <if test="noAdmin!=null">
            and id not in #{noAdmin}
        </if>
        <if test="userAccount != null and userAccount !=''">
            and user_account = #{userAccount}
        </if>
        <if test="userAccountLike != null and userAccountLike !=''">
            and user_account like CONCAT('%', #{userAccountLike}, '%')
        </if>
        <if test="userMobile != null and userMobile !=''">
            and user_mobile = #{userMobile}
        </if>
        <if test="userMobileLike != null and userMobileLike !=''">
            and user_mobile like CONCAT('%', #{userMobileLike}, '%')
        </if>
        <if test="userName != null and userName !=''">
            and user_name like CONCAT('%', #{userName}, '%')
        </if>
    </sql>
    <select id="findAllCount" parameterType="HashMap" resultType="Integer">
        select count(1)
        <include refid="findAllSql"/>
    </select>
    <select id="findAll" resultMap="BaseResultMap" parameterType="HashMap">
        select *
        <include refid="findAllSql"/>
        order by id asc
    </select>
    <!--	插入用户-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id"  parameterType="BackUser">
		insert back_user  
			(user_account,user_password,user_name,user_sex,user_address,user_telephone,
			user_mobile,user_email,user_qq,add_ip,remark)
		values 
		(#{userAccount},#{userPassword},#{userName},#{userSex},#{userAddress},#{userTelephone},
		#{userMobile},#{userEmail},#{userQq},#{addIp},#{remark})
	</insert>
    <!--	删除用户-->
    <update id="deleteById" parameterType="Integer">
		update back_user set status = 2 where id =#{id} and id !=10000
	</update>
    <!--	更新用户对象-->
    <update id="updateById" parameterType="BackUser">
        update back_user
        <set>
            <if test="userAccount != null and userAccount != ''">
                user_account =#{userAccount},
            </if>
            <if test="userPassword != null and userPassword !=''">
                user_password =#{userPassword},
            </if>
            <if test="userName != null and userName != ''">
                user_name =#{userName},
            </if>
            <if test="userSex != null and userSex != ''">
                user_sex =#{userSex},
            </if>
            <if test="userAddress != null and userAddress != ''">
                user_address =#{userAddress},
            </if>
            <if test="userTelephone != null and userTelephone != ''">
                user_telephone =#{userTelephone},
            </if>
            <if test="userMobile != null and userMobile != ''">
                user_mobile =#{userMobile},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email =#{userEmail},
            </if>
            <if test="userQq != null and userQq != ''">
                user_qq =#{userQq},
            </if>
            <if test="remark != null and remark != ''">
                remark =#{remark},
            </if>
            <if test="orderLimitFlag != null and orderLimitFlag != ''">
                order_limit_flag =#{orderLimitFlag},
            </if>
            <if test="orderLimitMor != null and orderLimitMor != ''">
                order_limit_mor =#{orderLimitMor},
            </if>
            <if test="orderLimitNig != null and orderLimitNig != ''">
                order_limit_nig =#{orderLimitNig},
            </if>
        </set>
        where id =#{id} and id !=10000
    </update>
    <!--	更新密码-->
    <update id="updatePwdById" parameterType="BackUser">
		update back_user set user_password =#{userPassword} where id =#{id}
	</update>

    <!--关联查询back_user_role back_role back_user-->
    <select id="findKeFuList" parameterType="HashMap" resultMap="BaseResultMap">
        SELECT a.id,
        a.user_name,
        a.user_mobile
        from `back_user` a
        LEFT JOIN `back_user_role` b on a.`id`= b.user_id
        LEFT JOIN `back_role` c on b.role_id= c.id
        where 1=1
        <if test="roleName != null and roleName != ''">
            and c.`role_name`= #{roleName}
        </if>
        <if test="status != null and status != ''">
            and a.status = #{status}
        </if>
	</select>
    <select id="findReviewerByModuleUrl" parameterType="String" resultMap="BaseResultMap">
        SELECT bu.id,bu.user_name,brd.distribution_rate FROM back_user bu
        LEFT JOIN back_review_distribution brd on bu.id = brd.user_id
        where bu.status=1 AND
        bu.id in(
        SELECT DISTINCT user_id FROM back_user_role where role_id in(
        SELECT brm.role_id FROM back_role_module brm INNER JOIN back_module bm on brm.module_id = bm.id
        and bm.module_url = #{moduleUrl} ))
	</select>
    <select id="findReviewerById" parameterType="Integer" resultMap="BaseResultMap">
        SELECT bu.id,bu.user_name,brd.distribution_rate FROM back_user bu
        LEFT JOIN back_review_distribution brd on bu.id = brd.user_id
        <where>
            bu.id = #{id} AND bu.status=1
        </where>
    </select>

    <delete id="pyhsicalDeleteById" parameterType="Integer">
        delete from back_user where id = #{id};
        delete from back_user_role where user_id = #{id};
    </delete>
    <select id="getBackUserIdByPhone" resultType="String" parameterType="String">
        select id from back_user where user_mobile = #{phone}
    </select>

    <update id="updateAllById" parameterType="BackUser">
        update back_user
        <set>
            <if test="userAccount != null and userAccount != ''">
                user_account =#{userAccount},
            </if>
            <if test="userPassword != null and userPassword !=''">
                user_password =#{userPassword},
            </if>
            <if test="userName != null and userName != ''">
                user_name =#{userName},
            </if>
            <if test="userSex != null and userSex != ''">
                user_sex =#{userSex},
            </if>
            <if test="userAddress != null and userAddress != ''">
                user_address =#{userAddress},
            </if>
            <if test="userTelephone != null and userTelephone != ''">
                user_telephone =#{userTelephone},
            </if>
            <if test="userMobile != null and userMobile != ''">
                user_mobile =#{userMobile},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email =#{userEmail},
            </if>
            <if test="userQq != null and userQq != ''">
                user_qq =#{userQq},
            </if>
            <if test="remark != null and remark != ''">
                remark =#{remark},
            </if>
            <if test="status != null and status != ''">
                status = #{status}
            </if>
        </set>
        where id =#{id} and id !=10000
    </update>

    <select id="findByUserId" parameterType="Integer" resultMap="BaseResultMap">
        SELECT * FROM back_user bu
        <where>
            bu.id = #{userId} AND bu.status=1
        </where>
    </select>

    <select id="selectSuperAdminStrByRoleId" parameterType="java.lang.Integer" resultType="java.lang.String">
        select GROUP_CONCAT(DISTINCT user_id) from back_user_role where 1=1 and role_id in (select id from back_role where role_super = #{roleId} or id = #{roleId})
    </select>
</mapper>