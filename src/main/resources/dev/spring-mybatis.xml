<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- 配置数据源 -->
    <bean id="haze_server" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
        <property name="acquireIncrement" value="1"/>
        <property name="maxStatements" value="0"/>
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
        <property name="acquireRetryAttempts" value="30"/>
        <property name="testConnectionOnCheckin" value="true"/>
    </bean>
    <bean id="haze_cs" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url_cs}"/>
        <property name="user" value="${jdbc.username_cs}"/>
        <property name="password" value="${jdbc.password_cs}"/>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
        <property name="acquireIncrement" value="1"/>
        <property name="maxStatements" value="0"/>
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
        <property name="acquireRetryAttempts" value="30"/>
        <property name="testConnectionOnCheckin" value="true"/>
        <property name="preferredTestQuery" value="select 1"/>
    </bean>
    <!-- 数据源parent-->
    <bean id="dataSource" class="com.info.back.utils.DynamicDataSource">

        <property name ="targetDataSources">
            <map key-type ="java.lang.String">
                <entry value-ref ="haze_server" key="haze_server"/>
                <entry value-ref="haze_cs" key="haze_cs"/>
            </map >
        </property >
        <property name ="defaultTargetDataSource" ref= "haze_server"/>
    </bean>
    <import resource="spring-overdue.xml"/>
    <!-- 以下是Quartz定时调度配制-->
    <bean id="schedulerFactory" init-method="stop" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="configLocation" value="classpath:quartz.properties" />
        <property name="dataSource" ref="dataSource" />
        <property name="applicationContextSchedulerContextKey" value="applicationContext" />
        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后修改qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true" />
        <!-- 设置自动启动 -->
        <property name="autoStartup" value="true" />
        <!--	    启动后10秒执行   -->
        <property name="startupDelay" value="10"/>
        <property name="triggers">
            <list>
                <!--<ref bean="updateEdJobTrigger"/>-->
                <!--<ref bean="findJxlReportJobTrigger"/>-->
                <!--<ref bean="updateAnalysisJobTrigger"/>-->
                <ref bean="overdueJobTrigger"/>
                <!--<ref bean="withholdJobTrigger"/>-->
                <ref bean="reportRepayment12JobTrigger"/>
                <ref bean="reportRepaymentE2JobTrigger"/>
                <!--<ref bean="smsRemindJobTrigger"/>-->
                <!--<ref bean="smsRemind9JobTrigger"/>-->
                <ref bean="channelReportJobTrigger"/>
                <ref bean="platformReportJobTrigger"/>
                <!-- <ref bean="assetsDivisionBeanTrigger"/> -->
                <!--<ref bean="updateRetryJobTrigger"/>-->
                <ref bean="thirdReportJobTrigger"/>
                <!--<ref bean="acitveClickStatisticsJobTrigger"/>-->
                <!--<ref bean="updateFromRiskJobTrigger"/>-->
                <!-- <ref bean="CZMassetsDivisionJobTrigger"/> -->
                <!--魔蝎不用 ，因为收费 	 <ref bean="findMobileReportJobTrigger"/> -->
                <!--<ref bean="queryOrderResultLianJobTrigger"/>-->
                <!--<ref bean="updateLoanTermJobTrigger"/>-->
                <!--<ref bean="payLoanInterestPaysJobTrigger"/>-->
                <!--<ref bean="queryPaysStateNotCmbJobTrigger"/>-->
                <!--<ref bean="queryPaysStateCmbJobTrigger"/>-->
                <!-- 续期处理中 查询处理-->
                <!--数据统计-->
                <!--<ref bean="dataAnalyzeJobTrigger" />-->
                <!--<ref bean="appMarketInitializJobTrigger" />-->
                <!--<ref bean="appMarketAnalyzeJobTrigger" />-->
                <ref bean="autoDistributionJobTrigger"/>
                <ref bean="autoAssignOrderJobTrigger"/>
                <ref bean="autoAssignOrderForNigJobTrigger"/>
                <ref bean="autoAddCustomerClassTrigger"/>
            </list>
        </property>
    </bean>


    <!--                                                    mybatis配置                                                    -->
    <!-- myBatis文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis.xml" />
        <property name="mapperLocations" value="classpath:com/info/*/mapping/*.xml" />
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.info.*.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!--mybatis文件-->
    <!--<bean id="sqlSessionFactory-qbm_cs" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!--<property name="dataSource" ref="qbm_cs" />-->
    <!--<property name="mapperLocations" value="classpath:com/info/web/mapping/*.xml" />-->
    <!--</bean>-->
    <!--<bean id="sqlSessionTemplate-qbm_cs" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--<constructor-arg index="0" ref="sqlSessionFactory-qbm_cs" />-->
    <!--</bean>-->

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <bean id="transactionManager-haze_cs" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="haze_cs" />
    </bean>
    <aop:config  proxy-target-class="true">
        <aop:pointcut id="transactionPointcut" expression="execution(* com.info.*.service.*.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
    <aop:config  proxy-target-class="true">
        <aop:pointcut id="transactionPointcut-haze_cs" expression="execution(* com.info.csPackage.*.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut-haze_cs" advice-ref="transactionAdvice-haze_cs" />
    </aop:config>
    <!-- 拦截器方式配置事务 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*"/>
            <tx:method name="save*"/>
            <tx:method name="insert*"/>
            <tx:method name="batch*"/>
            <tx:method name="modify*"/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="query*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <tx:advice id="transactionAdvice-haze_cs" transaction-manager="transactionManager-haze_cs">
        <tx:attributes>
            <tx:method name="add*"/>
            <tx:method name="save*"/>
            <tx:method name="insert*"/>
            <tx:method name="batch*"/>
            <tx:method name="modify*"/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="query" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>

</beans>  